Hey there! This is your friendly guide to all the API endpoints needed for your Kwik Eat food delivery app. I've listed them out with what they do, the request and response formats, and where in the code you'll need to use them. Remember, these are the backend endpoints your Node.js/Express server should have.

I've also added comments in your Flutter code showing exactly where to make the API calls. Just replace the mock stuff with real HTTP requests!

**Authentication Endpoints:**

1. **POST /api/auth/signup**
   - Purpose: Register a new user
   - Used in: flutter/lib/providers/auth_provider.dart in the signup() method
   - Request Body: { "name": "string", "email": "string", "phone": "string", "password": "string", "address": "string" }
   - Response: { "message": "success", "user": {...}, "token": "jwt_token" } or { "error": "message" }

2. **POST /api/auth/login**
   - Purpose: Log in an existing user
   - Used in: flutter/lib/providers/auth_provider.dart in the login() method
   - Request Body: { "email": "string", "password": "string" }
   - Response: { "message": "success", "user": {...}, "token": "jwt_token" } or { "error": "message" }

3. **POST /api/auth/logout**
   - Purpose: Log out the user (if using sessions)
   - Used in: flutter/lib/providers/auth_provider.dart in the logout() method
   - Request: None (use Authorization header with token)
   - Response: { "message": "logged out" }

4. **GET /api/auth/profile**
   - Purpose: Get current user's profile
   - Used in: flutter/lib/providers/auth_provider.dart when loading user data
   - Request: Authorization header with token
   - Response: { "user": { "id": "string", "name": "string", "email": "string", "phone": "string", "address": "string" } }

5. **PUT /api/auth/profile**
   - Purpose: Update user profile
   - Used in: flutter/lib/providers/auth_provider.dart in the updateProfile() method
   - Request: Authorization header + Body: { "name": "string", "email": "string", "phone": "string", "address": "string" }
   - Response: { "message": "updated", "user": {...} }

6. **POST /api/auth/reset-password**
   - Purpose: Reset user password
   - Used in: flutter/lib/providers/auth_provider.dart in the resetPassword() method
   - Request Body: { "email": "string" } or { "token": "reset_token", "newPassword": "string" }
   - Response: { "message": "password reset email sent" } or { "message": "password updated" }

**Restaurant Endpoints:**

7. **GET /api/restaurants**
   - Purpose: Get list of all restaurants
   - Used in: flutter/lib/screens/home_screen.dart to display restaurants
   - Request: None
   - Response: [ { "id": "string", "name": "string", "image": "url", "menu": [ { "id": "string", "name": "string", "description": "string", "price": number, "image": "url" }, ... ] }, ... ]

8. **GET /api/restaurants/:id**
   - Purpose: Get details of a specific restaurant
   - Used in: flutter/lib/screens/restaurant_screen.dart when viewing a restaurant
   - Request: URL parameter :id
   - Response: { "id": "string", "name": "string", "image": "url", "menu": [...] }

**Order Endpoints:**

9. **POST /api/orders**
   - Purpose: Place a new order
   - Used in: flutter/lib/providers/cart_provider.dart or flutter/lib/screens/cart_screen.dart when placing order
   - Request: Authorization header + Body: { "restaurantId": "string", "restaurantName": "string", "restaurantImage": "url", "items": [ { "name": "string", "image": "url", "price": number, "quantity": number } ], "totalPrice": number, "deliveryAddress": "string" }
   - Response: { "message": "order placed", "order": { "id": "string", "status": "pending", "orderTime": "datetime", ... } }

10. **GET /api/orders**
    - Purpose: Get user's order history
    - Used in: flutter/lib/screens/history_screen.dart to display orders
    - Request: Authorization header
    - Response: [ { "id": "string", "restaurantName": "string", "restaurantImage": "url", "items": [...], "totalPrice": number, "orderTime": "datetime", "status": "string" }, ... ]

11. **GET /api/orders/:id**
    - Purpose: Get details of a specific order
    - Used in: flutter/lib/screens/history_screen.dart for order details
    - Request: Authorization header + URL parameter :id
    - Response: { "id": "string", "restaurantName": "string", "restaurantImage": "url", "items": [...], "totalPrice": number, "orderTime": "datetime", "status": "string", "deliveryAddress": "string" }

12. **PUT /api/orders/:id/status**
    - Purpose: Update order status (for restaurant or admin)
    - Used in: Maybe in a future admin panel
    - Request: Authorization header + Body: { "status": "preparing|delivered|cancelled" }
    - Response: { "message": "status updated", "order": {...} }

**Next Steps:**
1. Implement these endpoints in your backend/server.js
2. In Flutter, replace the mock code with HTTP requests using the 'http' package
3. Add error handling and loading states
4. Test everything works together!

Remember to handle JWT tokens for authentication - store them securely in Flutter and send in Authorization headers.

If you need help implementing any of these, just let me know! ðŸ˜Š
